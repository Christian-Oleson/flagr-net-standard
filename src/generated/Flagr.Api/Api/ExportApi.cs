/* 
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Flagr.Api.Client;
using Flagr.Api.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Flagr.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IExportApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object GetExportEvalCacheJSON_GET ();

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetExportEvalCacheJSON_GETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetExportSqlite_GET (bool? excludeSnapshots = null);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetExportSqlite_GETWithHttpInfo (bool? excludeSnapshots = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetExportEvalCacheJSON_GETAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetExportEvalCacheJSON_GETAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetExportSqlite_GETAsync (bool? excludeSnapshots = null);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetExportSqlite_GETAsyncWithHttpInfo (bool? excludeSnapshots = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    [ExcludeFromCodeCoverage]
    public partial class ExportApi : IExportApi
    {
        private Flagr.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExportApi(string basePath)
        {
            Configuration = new Flagr.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExportApi(Flagr.Api.Client.Configuration configuration = null)
        {
            Configuration = configuration ?? Flagr.Api.Client.Configuration.Default;

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl != null ? Configuration.ApiClient.RestClient.BaseUrl.ToString() : string.Empty;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flagr.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flagr.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Export JSON format of the eval cache dump
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object GetExportEvalCacheJSON_GET ()
        {
            ApiResponse<Object> response = GetExportEvalCacheJSON_GETWithHttpInfo();
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling GetExportEvalCacheJSON_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling GetExportEvalCacheJSON_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  Export JSON format of the eval cache dump
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetExportEvalCacheJSON_GETWithHttpInfo ()
        {

            const string localVarPath = "./export/eval_cache/json";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  Export JSON format of the eval cache dump
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetExportEvalCacheJSON_GETAsync ()
        {
            ApiResponse<Object> response = await GetExportEvalCacheJSON_GETAsyncWithHttpInfo();
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling GetExportEvalCacheJSON_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling GetExportEvalCacheJSON_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  Export JSON format of the eval cache dump
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetExportEvalCacheJSON_GETAsyncWithHttpInfo ()
        {

            var localVarPath = "./export/eval_cache/json";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  Export sqlite3 format of the db dump, which is converted from the main database.
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetExportSqlite_GET (bool? excludeSnapshots = null)
        {
            ApiResponse<System.IO.Stream> response = GetExportSqlite_GETWithHttpInfo(excludeSnapshots);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling GetExportSqlite_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling GetExportSqlite_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  Export sqlite3 format of the db dump, which is converted from the main database.
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetExportSqlite_GETWithHttpInfo (bool? excludeSnapshots = null)
        {

            const string localVarPath = "./export/sqlite";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/octet-stream"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSnapshots != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_snapshots", excludeSnapshots)); // query parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            System.IO.Stream resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (System.IO.Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  Export sqlite3 format of the db dump, which is converted from the main database.
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetExportSqlite_GETAsync (bool? excludeSnapshots = null)
        {
            ApiResponse<System.IO.Stream> response = await GetExportSqlite_GETAsyncWithHttpInfo(excludeSnapshots);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling GetExportSqlite_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling GetExportSqlite_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  Export sqlite3 format of the db dump, which is converted from the main database.
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeSnapshots">export without snapshots data - useful for smaller db without snapshots  (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetExportSqlite_GETAsyncWithHttpInfo (bool? excludeSnapshots = null)
        {

            var localVarPath = "./export/sqlite";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/octet-stream"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (excludeSnapshots != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_snapshots", excludeSnapshots)); // query parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            System.IO.Stream resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (System.IO.Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
    }
}

/* 
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flagr.Api.Client.SwaggerDateConverter;

namespace Flagr.Api.Model
{
    /// <summary>
    /// EvalContext
    /// </summary>
    [ExcludeFromCodeCoverage]
    [DataContract]
    public partial class EvalContext :  IEquatable<EvalContext>
    {
        /// <summary>
        /// determine how flagTags is used to filter flags to be evaluated. OR extends the evaluation to those which contains at least one of the provided flagTags or AND limit the evaluation to those which contains all the flagTags.
        /// </summary>
        /// <value>determine how flagTags is used to filter flags to be evaluated. OR extends the evaluation to those which contains at least one of the provided flagTags or AND limit the evaluation to those which contains all the flagTags.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlagTagsOperatorEnum
        {
            
            /// <summary>
            /// Enum ANY for value: ANY
            /// </summary>
            [EnumMember(Value = "ANY")]
            ANY = 1,
            
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 2
        }

        /// <summary>
        /// determine how flagTags is used to filter flags to be evaluated. OR extends the evaluation to those which contains at least one of the provided flagTags or AND limit the evaluation to those which contains all the flagTags.
        /// </summary>
        /// <value>determine how flagTags is used to filter flags to be evaluated. OR extends the evaluation to those which contains at least one of the provided flagTags or AND limit the evaluation to those which contains all the flagTags.</value>
        [DataMember(Name="flagTagsOperator", EmitDefaultValue=false)]
        public FlagTagsOperatorEnum? FlagTagsOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EvalContext" /> class.
        /// </summary>
        /// <param name="entityID">entityID is used to deterministically at random to evaluate the flag result. If it&#39;s empty, flagr will randomly generate one..</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="entityContext">entityContext.</param>
        /// <param name="enableDebug">enableDebug.</param>
        /// <param name="flagID">flagID.</param>
        /// <param name="flagKey">flagKey. flagID or flagKey will resolve to the same flag. Either works..</param>
        /// <param name="flagTags">flagTags. flagTags looks up flags by tag. Either works..</param>
        /// <param name="flagTagsOperator">determine how flagTags is used to filter flags to be evaluated. OR extends the evaluation to those which contains at least one of the provided flagTags or AND limit the evaluation to those which contains all the flagTags. (default to FlagTagsOperatorEnum.ANY).</param>
        public EvalContext(string entityID = default(string), string entityType = default(string), Object entityContext = default(Object), bool? enableDebug = default(bool?), long? flagID = default(long?), string flagKey = default(string), List<string> flagTags = default(List<string>), FlagTagsOperatorEnum? flagTagsOperator = FlagTagsOperatorEnum.ANY)
        {
            this.EntityID = entityID;
            this.EntityType = entityType;
            this.EntityContext = entityContext;
            this.EnableDebug = enableDebug;
            this.FlagID = flagID;
            this.FlagKey = flagKey;
            this.FlagTags = flagTags;
            // use default value if no "flagTagsOperator" provided
            if (flagTagsOperator == null)
            {
                this.FlagTagsOperator = FlagTagsOperatorEnum.ANY;
            }
            else
            {
                this.FlagTagsOperator = flagTagsOperator;
            }
        }
        
        /// <summary>
        /// entityID is used to deterministically at random to evaluate the flag result. If it&#39;s empty, flagr will randomly generate one.
        /// </summary>
        /// <value>entityID is used to deterministically at random to evaluate the flag result. If it&#39;s empty, flagr will randomly generate one.</value>
        [DataMember(Name="entityID", EmitDefaultValue=false)]
        public string EntityID { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets EntityContext
        /// </summary>
        [DataMember(Name="entityContext", EmitDefaultValue=false)]
        public Object EntityContext { get; set; }

        /// <summary>
        /// Gets or Sets EnableDebug
        /// </summary>
        [DataMember(Name="enableDebug", EmitDefaultValue=false)]
        public bool? EnableDebug { get; set; }

        /// <summary>
        /// flagID
        /// </summary>
        /// <value>flagID</value>
        [DataMember(Name="flagID", EmitDefaultValue=false)]
        public long? FlagID { get; set; }

        /// <summary>
        /// flagKey. flagID or flagKey will resolve to the same flag. Either works.
        /// </summary>
        /// <value>flagKey. flagID or flagKey will resolve to the same flag. Either works.</value>
        [DataMember(Name="flagKey", EmitDefaultValue=false)]
        public string FlagKey { get; set; }

        /// <summary>
        /// flagTags. flagTags looks up flags by tag. Either works.
        /// </summary>
        /// <value>flagTags. flagTags looks up flags by tag. Either works.</value>
        [DataMember(Name="flagTags", EmitDefaultValue=false)]
        public List<string> FlagTags { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvalContext {\n");
            sb.Append("  EntityID: ").Append(EntityID).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityContext: ").Append(EntityContext).Append("\n");
            sb.Append("  EnableDebug: ").Append(EnableDebug).Append("\n");
            sb.Append("  FlagID: ").Append(FlagID).Append("\n");
            sb.Append("  FlagKey: ").Append(FlagKey).Append("\n");
            sb.Append("  FlagTags: ").Append(FlagTags).Append("\n");
            sb.Append("  FlagTagsOperator: ").Append(FlagTagsOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvalContext);
        }

        /// <summary>
        /// Returns true if EvalContext instances are equal
        /// </summary>
        /// <param name="input">Instance of EvalContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvalContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityID == input.EntityID ||
                    (this.EntityID != null &&
                    this.EntityID.Equals(input.EntityID))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityContext == input.EntityContext ||
                    (this.EntityContext != null &&
                    this.EntityContext.Equals(input.EntityContext))
                ) && 
                (
                    this.EnableDebug == input.EnableDebug ||
                    (this.EnableDebug != null &&
                    this.EnableDebug.Equals(input.EnableDebug))
                ) && 
                (
                    this.FlagID == input.FlagID ||
                    (this.FlagID != null &&
                    this.FlagID.Equals(input.FlagID))
                ) && 
                (
                    this.FlagKey == input.FlagKey ||
                    (this.FlagKey != null &&
                    this.FlagKey.Equals(input.FlagKey))
                ) && 
                (
                    this.FlagTags == input.FlagTags ||
                    this.FlagTags != null &&
                    this.FlagTags.SequenceEqual(input.FlagTags)
                ) && 
                (
                    this.FlagTagsOperator == input.FlagTagsOperator ||
                    (this.FlagTagsOperator != null &&
                    this.FlagTagsOperator.Equals(input.FlagTagsOperator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityID != null)
                    hashCode = hashCode * 59 + this.EntityID.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntityContext != null)
                    hashCode = hashCode * 59 + this.EntityContext.GetHashCode();
                if (this.EnableDebug != null)
                    hashCode = hashCode * 59 + this.EnableDebug.GetHashCode();
                if (this.FlagID != null)
                    hashCode = hashCode * 59 + this.FlagID.GetHashCode();
                if (this.FlagKey != null)
                    hashCode = hashCode * 59 + this.FlagKey.GetHashCode();
                if (this.FlagTags != null)
                    hashCode = hashCode * 59 + this.FlagTags.GetHashCode();
                if (this.FlagTagsOperator != null)
                    hashCode = hashCode * 59 + this.FlagTagsOperator.GetHashCode();
                return hashCode;
            }
        }
    }

}

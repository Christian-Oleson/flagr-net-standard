/* 
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flagr.Api.Client.SwaggerDateConverter;

namespace Flagr.Api.Model
{
    /// <summary>
    /// EvalResult
    /// </summary>
    [DataContract]
    public partial class EvalResult :  IEquatable<EvalResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvalResult" /> class.
        /// </summary>
        /// <param name="flagID">flagID.</param>
        /// <param name="flagKey">flagKey.</param>
        /// <param name="flagSnapshotID">flagSnapshotID.</param>
        /// <param name="segmentID">segmentID.</param>
        /// <param name="variantID">variantID.</param>
        /// <param name="variantKey">variantKey.</param>
        /// <param name="variantAttachment">variantAttachment.</param>
        /// <param name="evalContext">evalContext.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="evalDebugLog">evalDebugLog.</param>
        public EvalResult(long? flagID = default(long?), string flagKey = default(string), long? flagSnapshotID = default(long?), long? segmentID = default(long?), long? variantID = default(long?), string variantKey = default(string), Object variantAttachment = default(Object), EvalContext evalContext = default(EvalContext), string timestamp = default(string), EvalDebugLog evalDebugLog = default(EvalDebugLog))
        {
            this.FlagID = flagID;
            this.FlagKey = flagKey;
            this.FlagSnapshotID = flagSnapshotID;
            this.SegmentID = segmentID;
            this.VariantID = variantID;
            this.VariantKey = variantKey;
            this.VariantAttachment = variantAttachment;
            this.EvalContext = evalContext;
            this.Timestamp = timestamp;
            this.EvalDebugLog = evalDebugLog;
        }
        
        /// <summary>
        /// Gets or Sets FlagID
        /// </summary>
        [DataMember(Name="flagID", EmitDefaultValue=false)]
        public long? FlagID { get; set; }

        /// <summary>
        /// Gets or Sets FlagKey
        /// </summary>
        [DataMember(Name="flagKey", EmitDefaultValue=false)]
        public string FlagKey { get; set; }

        /// <summary>
        /// Gets or Sets FlagSnapshotID
        /// </summary>
        [DataMember(Name="flagSnapshotID", EmitDefaultValue=false)]
        public long? FlagSnapshotID { get; set; }

        /// <summary>
        /// Gets or Sets SegmentID
        /// </summary>
        [DataMember(Name="segmentID", EmitDefaultValue=false)]
        public long? SegmentID { get; set; }

        /// <summary>
        /// Gets or Sets VariantID
        /// </summary>
        [DataMember(Name="variantID", EmitDefaultValue=false)]
        public long? VariantID { get; set; }

        /// <summary>
        /// Gets or Sets VariantKey
        /// </summary>
        [DataMember(Name="variantKey", EmitDefaultValue=false)]
        public string VariantKey { get; set; }

        /// <summary>
        /// Gets or Sets VariantAttachment
        /// </summary>
        [DataMember(Name="variantAttachment", EmitDefaultValue=false)]
        public Object VariantAttachment { get; set; }

        /// <summary>
        /// Gets or Sets EvalContext
        /// </summary>
        [DataMember(Name="evalContext", EmitDefaultValue=false)]
        public EvalContext EvalContext { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets EvalDebugLog
        /// </summary>
        [DataMember(Name="evalDebugLog", EmitDefaultValue=false)]
        public EvalDebugLog EvalDebugLog { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvalResult {\n");
            sb.Append("  FlagID: ").Append(FlagID).Append("\n");
            sb.Append("  FlagKey: ").Append(FlagKey).Append("\n");
            sb.Append("  FlagSnapshotID: ").Append(FlagSnapshotID).Append("\n");
            sb.Append("  SegmentID: ").Append(SegmentID).Append("\n");
            sb.Append("  VariantID: ").Append(VariantID).Append("\n");
            sb.Append("  VariantKey: ").Append(VariantKey).Append("\n");
            sb.Append("  VariantAttachment: ").Append(VariantAttachment).Append("\n");
            sb.Append("  EvalContext: ").Append(EvalContext).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  EvalDebugLog: ").Append(EvalDebugLog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvalResult);
        }

        /// <summary>
        /// Returns true if EvalResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EvalResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvalResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FlagID == input.FlagID ||
                    (this.FlagID != null &&
                    this.FlagID.Equals(input.FlagID))
                ) && 
                (
                    this.FlagKey == input.FlagKey ||
                    (this.FlagKey != null &&
                    this.FlagKey.Equals(input.FlagKey))
                ) && 
                (
                    this.FlagSnapshotID == input.FlagSnapshotID ||
                    (this.FlagSnapshotID != null &&
                    this.FlagSnapshotID.Equals(input.FlagSnapshotID))
                ) && 
                (
                    this.SegmentID == input.SegmentID ||
                    (this.SegmentID != null &&
                    this.SegmentID.Equals(input.SegmentID))
                ) && 
                (
                    this.VariantID == input.VariantID ||
                    (this.VariantID != null &&
                    this.VariantID.Equals(input.VariantID))
                ) && 
                (
                    this.VariantKey == input.VariantKey ||
                    (this.VariantKey != null &&
                    this.VariantKey.Equals(input.VariantKey))
                ) && 
                (
                    this.VariantAttachment == input.VariantAttachment ||
                    (this.VariantAttachment != null &&
                    this.VariantAttachment.Equals(input.VariantAttachment))
                ) && 
                (
                    this.EvalContext == input.EvalContext ||
                    (this.EvalContext != null &&
                    this.EvalContext.Equals(input.EvalContext))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.EvalDebugLog == input.EvalDebugLog ||
                    (this.EvalDebugLog != null &&
                    this.EvalDebugLog.Equals(input.EvalDebugLog))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FlagID != null)
                    hashCode = hashCode * 59 + this.FlagID.GetHashCode();
                if (this.FlagKey != null)
                    hashCode = hashCode * 59 + this.FlagKey.GetHashCode();
                if (this.FlagSnapshotID != null)
                    hashCode = hashCode * 59 + this.FlagSnapshotID.GetHashCode();
                if (this.SegmentID != null)
                    hashCode = hashCode * 59 + this.SegmentID.GetHashCode();
                if (this.VariantID != null)
                    hashCode = hashCode * 59 + this.VariantID.GetHashCode();
                if (this.VariantKey != null)
                    hashCode = hashCode * 59 + this.VariantKey.GetHashCode();
                if (this.VariantAttachment != null)
                    hashCode = hashCode * 59 + this.VariantAttachment.GetHashCode();
                if (this.EvalContext != null)
                    hashCode = hashCode * 59 + this.EvalContext.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.EvalDebugLog != null)
                    hashCode = hashCode * 59 + this.EvalDebugLog.GetHashCode();
                return hashCode;
            }
        }
    }

}

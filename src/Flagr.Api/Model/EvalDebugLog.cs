/* 
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flagr.Api.Client.SwaggerDateConverter;

namespace Flagr.Api.Model
{
    /// <summary>
    /// EvalDebugLog
    /// </summary>
    [DataContract]
    public partial class EvalDebugLog :  IEquatable<EvalDebugLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvalDebugLog" /> class.
        /// </summary>
        /// <param name="segmentDebugLogs">segmentDebugLogs.</param>
        /// <param name="msg">msg.</param>
        public EvalDebugLog(List<SegmentDebugLog> segmentDebugLogs = default(List<SegmentDebugLog>), string msg = default(string))
        {
            this.SegmentDebugLogs = segmentDebugLogs;
            this.Msg = msg;
        }
        
        /// <summary>
        /// Gets or Sets SegmentDebugLogs
        /// </summary>
        [DataMember(Name="segmentDebugLogs", EmitDefaultValue=false)]
        public List<SegmentDebugLog> SegmentDebugLogs { get; set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name="msg", EmitDefaultValue=false)]
        public string Msg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvalDebugLog {\n");
            sb.Append("  SegmentDebugLogs: ").Append(SegmentDebugLogs).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvalDebugLog);
        }

        /// <summary>
        /// Returns true if EvalDebugLog instances are equal
        /// </summary>
        /// <param name="input">Instance of EvalDebugLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvalDebugLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SegmentDebugLogs == input.SegmentDebugLogs ||
                    this.SegmentDebugLogs != null &&
                    this.SegmentDebugLogs.SequenceEqual(input.SegmentDebugLogs)
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SegmentDebugLogs != null)
                    hashCode = hashCode * 59 + this.SegmentDebugLogs.GetHashCode();
                if (this.Msg != null)
                    hashCode = hashCode * 59 + this.Msg.GetHashCode();
                return hashCode;
            }
        }
    }

}

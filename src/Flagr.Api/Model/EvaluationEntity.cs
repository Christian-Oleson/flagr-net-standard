/* 
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flagr.Api.Client.SwaggerDateConverter;

namespace Flagr.Api.Model
{
    /// <summary>
    /// EvaluationEntity
    /// </summary>
    [ExcludeFromCodeCoverage]
    [DataContract]
    public partial class EvaluationEntity :  IEquatable<EvaluationEntity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationEntity" /> class.
        /// </summary>
        /// <param name="entityID">entityID.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="entityContext">entityContext.</param>
        public EvaluationEntity(string entityID = default(string), string entityType = default(string), Object entityContext = default(Object))
        {
            this.EntityID = entityID;
            this.EntityType = entityType;
            this.EntityContext = entityContext;
        }
        
        /// <summary>
        /// Gets or Sets EntityID
        /// </summary>
        [DataMember(Name="entityID", EmitDefaultValue=false)]
        public string EntityID { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets EntityContext
        /// </summary>
        [DataMember(Name="entityContext", EmitDefaultValue=false)]
        public Object EntityContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluationEntity {\n");
            sb.Append("  EntityID: ").Append(EntityID).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityContext: ").Append(EntityContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvaluationEntity);
        }

        /// <summary>
        /// Returns true if EvaluationEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of EvaluationEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluationEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityID == input.EntityID ||
                    (this.EntityID != null &&
                    this.EntityID.Equals(input.EntityID))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityContext == input.EntityContext ||
                    (this.EntityContext != null &&
                    this.EntityContext.Equals(input.EntityContext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityID != null)
                    hashCode = hashCode * 59 + this.EntityID.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntityContext != null)
                    hashCode = hashCode * 59 + this.EntityContext.GetHashCode();
                return hashCode;
            }
        }
    }

}

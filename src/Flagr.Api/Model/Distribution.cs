/* 
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flagr.Api.Client.SwaggerDateConverter;

namespace Flagr.Api.Model
{
    /// <summary>
    /// Distribution
    /// </summary>
    [ExcludeFromCodeCoverage]
    [DataContract]
    public partial class Distribution :  IEquatable<Distribution>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Distribution" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Distribution() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Distribution" /> class.
        /// </summary>
        /// <param name="percent">percent (required).</param>
        /// <param name="variantKey">variantKey (required).</param>
        /// <param name="variantID">variantID (required).</param>
        public Distribution(long? percent = default(long?), string variantKey = default(string), long? variantID = default(long?))
        {
            // to ensure "percent" is required (not null)
            if (percent == null)
            {
                throw new InvalidDataException("percent is a required property for Distribution and cannot be null");
            }
            else
            {
                this.Percent = percent;
            }
            // to ensure "variantKey" is required (not null)
            if (variantKey == null)
            {
                throw new InvalidDataException("variantKey is a required property for Distribution and cannot be null");
            }
            else
            {
                this.VariantKey = variantKey;
            }
            // to ensure "variantID" is required (not null)
            if (variantID == null)
            {
                throw new InvalidDataException("variantID is a required property for Distribution and cannot be null");
            }
            else
            {
                this.VariantID = variantID;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Percent
        /// </summary>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public long? Percent { get; set; }

        /// <summary>
        /// Gets or Sets VariantKey
        /// </summary>
        [DataMember(Name="variantKey", EmitDefaultValue=false)]
        public string VariantKey { get; set; }

        /// <summary>
        /// Gets or Sets VariantID
        /// </summary>
        [DataMember(Name="variantID", EmitDefaultValue=false)]
        public long? VariantID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Distribution {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  VariantKey: ").Append(VariantKey).Append("\n");
            sb.Append("  VariantID: ").Append(VariantID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Distribution);
        }

        /// <summary>
        /// Returns true if Distribution instances are equal
        /// </summary>
        /// <param name="input">Instance of Distribution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Distribution input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                ) && 
                (
                    this.VariantKey == input.VariantKey ||
                    (this.VariantKey != null &&
                    this.VariantKey.Equals(input.VariantKey))
                ) && 
                (
                    this.VariantID == input.VariantID ||
                    (this.VariantID != null &&
                    this.VariantID.Equals(input.VariantID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                if (this.VariantKey != null)
                    hashCode = hashCode * 59 + this.VariantKey.GetHashCode();
                if (this.VariantID != null)
                    hashCode = hashCode * 59 + this.VariantID.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Flagr.Api.Client.SwaggerDateConverter;

namespace Flagr.Api.Model
{
    /// <summary>
    /// SegmentDebugLog
    /// </summary>
    [DataContract]
    public partial class SegmentDebugLog :  IEquatable<SegmentDebugLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentDebugLog" /> class.
        /// </summary>
        /// <param name="segmentID">segmentID.</param>
        /// <param name="msg">msg.</param>
        public SegmentDebugLog(long? segmentID = default(long?), string msg = default(string))
        {
            this.SegmentID = segmentID;
            this.Msg = msg;
        }
        
        /// <summary>
        /// Gets or Sets SegmentID
        /// </summary>
        [DataMember(Name="segmentID", EmitDefaultValue=false)]
        public long? SegmentID { get; set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name="msg", EmitDefaultValue=false)]
        public string Msg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegmentDebugLog {\n");
            sb.Append("  SegmentID: ").Append(SegmentID).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegmentDebugLog);
        }

        /// <summary>
        /// Returns true if SegmentDebugLog instances are equal
        /// </summary>
        /// <param name="input">Instance of SegmentDebugLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegmentDebugLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SegmentID == input.SegmentID ||
                    (this.SegmentID != null &&
                    this.SegmentID.Equals(input.SegmentID))
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SegmentID != null)
                    hashCode = hashCode * 59 + this.SegmentID.GetHashCode();
                if (this.Msg != null)
                    hashCode = hashCode * 59 + this.Msg.GetHashCode();
                return hashCode;
            }
        }
    }

}

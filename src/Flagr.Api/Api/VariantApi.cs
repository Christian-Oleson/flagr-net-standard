/* 
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flagr.Api.Client;
using Flagr.Api.Model;

namespace Flagr.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVariantApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>Variant</returns>
        Variant CreateVariant (long? flagID, CreateVariantRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>ApiResponse of Variant</returns>
        ApiResponse<Variant> CreateVariantWithHttpInfo (long? flagID, CreateVariantRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns></returns>
        void DeleteVariant (long? flagID, long? variantID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVariantWithHttpInfo (long? flagID, long? variantID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>List&lt;Variant&gt;</returns>
        List<Variant> FindVariants (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of List&lt;Variant&gt;</returns>
        ApiResponse<List<Variant>> FindVariantsWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>Variant</returns>
        Variant PutVariant (long? flagID, long? variantID, PutVariantRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>ApiResponse of Variant</returns>
        ApiResponse<Variant> PutVariantWithHttpInfo (long? flagID, long? variantID, PutVariantRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>Task of Variant</returns>
        System.Threading.Tasks.Task<Variant> CreateVariantAsync (long? flagID, CreateVariantRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>Task of ApiResponse (Variant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variant>> CreateVariantAsyncWithHttpInfo (long? flagID, CreateVariantRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVariantAsync (long? flagID, long? variantID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVariantAsyncWithHttpInfo (long? flagID, long? variantID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of List&lt;Variant&gt;</returns>
        System.Threading.Tasks.Task<List<Variant>> FindVariantsAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse (List&lt;Variant&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Variant>>> FindVariantsAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>Task of Variant</returns>
        System.Threading.Tasks.Task<Variant> PutVariantAsync (long? flagID, long? variantID, PutVariantRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>Task of ApiResponse (Variant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Variant>> PutVariantAsyncWithHttpInfo (long? flagID, long? variantID, PutVariantRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VariantApi : IVariantApi
    {
        private Flagr.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VariantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VariantApi(String basePath)
        {
            this.Configuration = new Flagr.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VariantApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VariantApi(Flagr.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flagr.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flagr.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flagr.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>Variant</returns>
        public Variant CreateVariant (long? flagID, CreateVariantRequest body)
        {
             ApiResponse<Variant> localVarResponse = CreateVariantWithHttpInfo(flagID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>ApiResponse of Variant</returns>
        public ApiResponse< Variant > CreateVariantWithHttpInfo (long? flagID, CreateVariantRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->CreateVariant");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VariantApi->CreateVariant");

            var localVarPath = "./flags/{flagID}/variants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVariant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Variant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variant)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>Task of Variant</returns>
        public async System.Threading.Tasks.Task<Variant> CreateVariantAsync (long? flagID, CreateVariantRequest body)
        {
             ApiResponse<Variant> localVarResponse = await CreateVariantAsyncWithHttpInfo(flagID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a variant</param>
        /// <returns>Task of ApiResponse (Variant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variant>> CreateVariantAsyncWithHttpInfo (long? flagID, CreateVariantRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->CreateVariant");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VariantApi->CreateVariant");

            var localVarPath = "./flags/{flagID}/variants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVariant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Variant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variant)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns></returns>
        public void DeleteVariant (long? flagID, long? variantID)
        {
             DeleteVariantWithHttpInfo(flagID, variantID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVariantWithHttpInfo (long? flagID, long? variantID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->DeleteVariant");
            // verify the required parameter 'variantID' is set
            if (variantID == null)
                throw new ApiException(400, "Missing required parameter 'variantID' when calling VariantApi->DeleteVariant");

            var localVarPath = "./flags/{flagID}/variants/{variantID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (variantID != null) localVarPathParams.Add("variantID", this.Configuration.ApiClient.ParameterToString(variantID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVariant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVariantAsync (long? flagID, long? variantID)
        {
             await DeleteVariantAsyncWithHttpInfo(flagID, variantID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVariantAsyncWithHttpInfo (long? flagID, long? variantID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->DeleteVariant");
            // verify the required parameter 'variantID' is set
            if (variantID == null)
                throw new ApiException(400, "Missing required parameter 'variantID' when calling VariantApi->DeleteVariant");

            var localVarPath = "./flags/{flagID}/variants/{variantID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (variantID != null) localVarPathParams.Add("variantID", this.Configuration.ApiClient.ParameterToString(variantID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVariant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>List&lt;Variant&gt;</returns>
        public List<Variant> FindVariants (long? flagID)
        {
             ApiResponse<List<Variant>> localVarResponse = FindVariantsWithHttpInfo(flagID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of List&lt;Variant&gt;</returns>
        public ApiResponse< List<Variant> > FindVariantsWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->FindVariants");

            var localVarPath = "./flags/{flagID}/variants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindVariants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Variant>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Variant>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Variant>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of List&lt;Variant&gt;</returns>
        public async System.Threading.Tasks.Task<List<Variant>> FindVariantsAsync (long? flagID)
        {
             ApiResponse<List<Variant>> localVarResponse = await FindVariantsAsyncWithHttpInfo(flagID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse (List&lt;Variant&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Variant>>> FindVariantsAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->FindVariants");

            var localVarPath = "./flags/{flagID}/variants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindVariants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Variant>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Variant>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Variant>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>Variant</returns>
        public Variant PutVariant (long? flagID, long? variantID, PutVariantRequest body)
        {
             ApiResponse<Variant> localVarResponse = PutVariantWithHttpInfo(flagID, variantID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>ApiResponse of Variant</returns>
        public ApiResponse< Variant > PutVariantWithHttpInfo (long? flagID, long? variantID, PutVariantRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->PutVariant");
            // verify the required parameter 'variantID' is set
            if (variantID == null)
                throw new ApiException(400, "Missing required parameter 'variantID' when calling VariantApi->PutVariant");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VariantApi->PutVariant");

            var localVarPath = "./flags/{flagID}/variants/{variantID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (variantID != null) localVarPathParams.Add("variantID", this.Configuration.ApiClient.ParameterToString(variantID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutVariant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Variant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variant)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>Task of Variant</returns>
        public async System.Threading.Tasks.Task<Variant> PutVariantAsync (long? flagID, long? variantID, PutVariantRequest body)
        {
             ApiResponse<Variant> localVarResponse = await PutVariantAsyncWithHttpInfo(flagID, variantID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="variantID">numeric ID of the variant</param>
        /// <param name="body">update a variant</param>
        /// <returns>Task of ApiResponse (Variant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Variant>> PutVariantAsyncWithHttpInfo (long? flagID, long? variantID, PutVariantRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling VariantApi->PutVariant");
            // verify the required parameter 'variantID' is set
            if (variantID == null)
                throw new ApiException(400, "Missing required parameter 'variantID' when calling VariantApi->PutVariant");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VariantApi->PutVariant");

            var localVarPath = "./flags/{flagID}/variants/{variantID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (variantID != null) localVarPathParams.Add("variantID", this.Configuration.ApiClient.ParameterToString(variantID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutVariant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Variant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Variant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Variant)));
        }

    }
}

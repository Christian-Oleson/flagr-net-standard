/* 
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Flagr.Api.Client;
using Flagr.Api.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Flagr.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface ITagApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>Tag</returns>
        Tag CreateTag_POST (long? flagID, CreateTagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> CreateTag_POSTWithHttpInfo (long? flagID, CreateTagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns></returns>
        void DeleteTag_DELETE (long? flagID, long? tagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns>ApiResponse of object(void)</returns>
        ApiResponse<object> DeleteTag_DELETEWithHttpInfo (long? flagID, long? tagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> FindAllTags_GET (long? limit = null, long? offset = null, string valueLike = null);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> FindAllTags_GETWithHttpInfo (long? limit = null, long? offset = null, string valueLike = null);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> FindTags_GET (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> FindTags_GETWithHttpInfo (long? flagID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> CreateTag_POSTAsync (long? flagID, CreateTagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTag_POSTAsyncWithHttpInfo (long? flagID, CreateTagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTag_DELETEAsync (long? flagID, long? tagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DeleteTag_DELETEAsyncWithHttpInfo (long? flagID, long? tagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> FindAllTags_GETAsync (long? limit = null, long? offset = null, string valueLike = null);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> FindAllTags_GETAsyncWithHttpInfo (long? limit = null, long? offset = null, string valueLike = null);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> FindTags_GETAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> FindTags_GETAsyncWithHttpInfo (long? flagID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    [ExcludeFromCodeCoverage]
    public partial class TagApi : ITagApi
    {
        private Flagr.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagApi(string basePath)
        {
            Configuration = new Flagr.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagApi(Flagr.Api.Client.Configuration configuration = null)
        {
            Configuration = configuration ?? Flagr.Api.Client.Configuration.Default;

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl != null ? Configuration.ApiClient.RestClient.BaseUrl.ToString() : string.Empty;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flagr.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flagr.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>Tag</returns>
        public Tag CreateTag_POST (long? flagID, CreateTagRequest body)
        {
            ApiResponse<Tag> response = CreateTag_POSTWithHttpInfo(flagID, body);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling CreateTag_POST: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling CreateTag_POST: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > CreateTag_POSTWithHttpInfo (long? flagID, CreateTagRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling TagApi->CreateTag_POST");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TagApi->CreateTag_POST");

            const string localVarPath = "./flags/{flagID}/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Tag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Tag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> CreateTag_POSTAsync (long? flagID, CreateTagRequest body)
        {
            ApiResponse<Tag> response = await CreateTag_POSTAsyncWithHttpInfo(flagID, body);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling CreateTag_POST: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling CreateTag_POST: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="body">create a tag</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> CreateTag_POSTAsyncWithHttpInfo (long? flagID, CreateTagRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling TagApi->CreateTag_POST");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TagApi->CreateTag_POST");

            var localVarPath = "./flags/{flagID}/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Tag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Tag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns></returns>
        public void DeleteTag_DELETE (long? flagID, long? tagID)
        {
            DeleteTag_DELETEWithHttpInfo(flagID, tagID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns>ApiResponse of object(void)</returns>
        public ApiResponse<object> DeleteTag_DELETEWithHttpInfo (long? flagID, long? tagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling TagApi->DeleteTag_DELETE");
            // verify the required parameter 'tagID' is set
            if (tagID == null)
                throw new ApiException(400, "Missing required parameter 'tagID' when calling TagApi->DeleteTag_DELETE");

            const string localVarPath = "./flags/{flagID}/tags/{tagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (tagID != null) localVarPathParams.Add("tagID", this.Configuration.ApiClient.ParameterToString(tagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                null,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTag_DELETEAsync (long? flagID, long? tagID)
        {
            await DeleteTag_DELETEAsyncWithHttpInfo(flagID, tagID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="tagID">numeric ID of the tag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DeleteTag_DELETEAsyncWithHttpInfo (long? flagID, long? tagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling TagApi->DeleteTag_DELETE");
            // verify the required parameter 'tagID' is set
            if (tagID == null)
                throw new ApiException(400, "Missing required parameter 'tagID' when calling TagApi->DeleteTag_DELETE");

            var localVarPath = "./flags/{flagID}/tags/{tagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (tagID != null) localVarPathParams.Add("tagID", this.Configuration.ApiClient.ParameterToString(tagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                null,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> FindAllTags_GET (long? limit = null, long? offset = null, string valueLike = null)
        {
            ApiResponse<List<Tag>> response = FindAllTags_GETWithHttpInfo(limit, offset, valueLike);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling FindAllTags_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling FindAllTags_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse< List<Tag> > FindAllTags_GETWithHttpInfo (long? limit = null, long? offset = null, string valueLike = null)
        {

            const string localVarPath = "./tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (valueLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value_like", valueLike)); // query parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            List<Tag> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Tag>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> FindAllTags_GETAsync (long? limit = null, long? offset = null, string valueLike = null)
        {
            ApiResponse<List<Tag>> response = await FindAllTags_GETAsyncWithHttpInfo(limit, offset, valueLike);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling FindAllTags_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling FindAllTags_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of tags to return (optional)</param>
        /// <param name="offset">return tags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="valueLike">return tags partially matching given value (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> FindAllTags_GETAsyncWithHttpInfo (long? limit = null, long? offset = null, string valueLike = null)
        {

            var localVarPath = "./tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (valueLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value_like", valueLike)); // query parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            List<Tag> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Tag>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> FindTags_GET (long? flagID)
        {
            ApiResponse<List<Tag>> response = FindTags_GETWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling FindTags_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling FindTags_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse< List<Tag> > FindTags_GETWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling TagApi->FindTags_GET");

            const string localVarPath = "./flags/{flagID}/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            List<Tag> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Tag>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> FindTags_GETAsync (long? flagID)
        {
            ApiResponse<List<Tag>> response = await FindTags_GETAsyncWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling FindTags_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling FindTags_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> FindTags_GETAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling TagApi->FindTags_GET");

            var localVarPath = "./flags/{flagID}/tags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            List<Tag> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Tag>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
    }
}

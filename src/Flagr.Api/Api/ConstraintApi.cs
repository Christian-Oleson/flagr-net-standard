/* 
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Flagr.Api.Client;
using Flagr.Api.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Flagr.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IConstraintApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Constraint</returns>
        Constraint CreateConstraint_POST (long? flagID, long? segmentID, CreateConstraintRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>ApiResponse of Constraint</returns>
        ApiResponse<Constraint> CreateConstraint_POSTWithHttpInfo (long? flagID, long? segmentID, CreateConstraintRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns></returns>
        void DeleteConstraint_DELETE (long? flagID, long? segmentID, long? constraintID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns>ApiResponse of object(void)</returns>
        ApiResponse<object> DeleteConstraint_DELETEWithHttpInfo (long? flagID, long? segmentID, long? constraintID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>List&lt;Constraint&gt;</returns>
        List<Constraint> FindConstraints_GET (long? flagID, long? segmentID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>ApiResponse of List&lt;Constraint&gt;</returns>
        ApiResponse<List<Constraint>> FindConstraints_GETWithHttpInfo (long? flagID, long? segmentID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Constraint</returns>
        Constraint PutConstraint_PUT (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>ApiResponse of Constraint</returns>
        ApiResponse<Constraint> PutConstraint_PUTWithHttpInfo (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of Constraint</returns>
        System.Threading.Tasks.Task<Constraint> CreateConstraint_POSTAsync (long? flagID, long? segmentID, CreateConstraintRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of ApiResponse (Constraint)</returns>
        System.Threading.Tasks.Task<ApiResponse<Constraint>> CreateConstraint_POSTAsyncWithHttpInfo (long? flagID, long? segmentID, CreateConstraintRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConstraint_DELETEAsync (long? flagID, long? segmentID, long? constraintID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DeleteConstraint_DELETEAsyncWithHttpInfo (long? flagID, long? segmentID, long? constraintID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>Task of List&lt;Constraint&gt;</returns>
        System.Threading.Tasks.Task<List<Constraint>> FindConstraints_GETAsync (long? flagID, long? segmentID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>Task of ApiResponse (List&lt;Constraint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Constraint>>> FindConstraints_GETAsyncWithHttpInfo (long? flagID, long? segmentID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of Constraint</returns>
        System.Threading.Tasks.Task<Constraint> PutConstraint_PUTAsync (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of ApiResponse (Constraint)</returns>
        System.Threading.Tasks.Task<ApiResponse<Constraint>> PutConstraint_PUTAsyncWithHttpInfo (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    [ExcludeFromCodeCoverage]
    public partial class ConstraintApi : IConstraintApi
    {
        private Flagr.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConstraintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConstraintApi(string basePath)
        {
            Configuration = new Flagr.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConstraintApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConstraintApi(Flagr.Api.Client.Configuration configuration = null)
        {
            Configuration = configuration ?? Flagr.Api.Client.Configuration.Default;

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl != null ? Configuration.ApiClient.RestClient.BaseUrl.ToString() : string.Empty;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flagr.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flagr.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Constraint</returns>
        public Constraint CreateConstraint_POST (long? flagID, long? segmentID, CreateConstraintRequest body)
        {
            ApiResponse<Constraint> response = CreateConstraint_POSTWithHttpInfo(flagID, segmentID, body);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling CreateConstraint_POST: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling CreateConstraint_POST: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>ApiResponse of Constraint</returns>
        public ApiResponse< Constraint > CreateConstraint_POSTWithHttpInfo (long? flagID, long? segmentID, CreateConstraintRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->CreateConstraint_POST");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->CreateConstraint_POST");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConstraintApi->CreateConstraint_POST");

            const string localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Constraint resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Constraint)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Constraint));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Constraint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of Constraint</returns>
        public async System.Threading.Tasks.Task<Constraint> CreateConstraint_POSTAsync (long? flagID, long? segmentID, CreateConstraintRequest body)
        {
            ApiResponse<Constraint> response = await CreateConstraint_POSTAsyncWithHttpInfo(flagID, segmentID, body);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling CreateConstraint_POST: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling CreateConstraint_POST: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of ApiResponse (Constraint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Constraint>> CreateConstraint_POSTAsyncWithHttpInfo (long? flagID, long? segmentID, CreateConstraintRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->CreateConstraint_POST");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->CreateConstraint_POST");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConstraintApi->CreateConstraint_POST");

            var localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Constraint resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Constraint)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Constraint));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Constraint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns></returns>
        public void DeleteConstraint_DELETE (long? flagID, long? segmentID, long? constraintID)
        {
            DeleteConstraint_DELETEWithHttpInfo(flagID, segmentID, constraintID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns>ApiResponse of object(void)</returns>
        public ApiResponse<object> DeleteConstraint_DELETEWithHttpInfo (long? flagID, long? segmentID, long? constraintID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->DeleteConstraint_DELETE");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->DeleteConstraint_DELETE");
            // verify the required parameter 'constraintID' is set
            if (constraintID == null)
                throw new ApiException(400, "Missing required parameter 'constraintID' when calling ConstraintApi->DeleteConstraint_DELETE");

            const string localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints/{constraintID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (constraintID != null) localVarPathParams.Add("constraintID", this.Configuration.ApiClient.ParameterToString(constraintID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                null,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConstraint_DELETEAsync (long? flagID, long? segmentID, long? constraintID)
        {
            await DeleteConstraint_DELETEAsyncWithHttpInfo(flagID, segmentID, constraintID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DeleteConstraint_DELETEAsyncWithHttpInfo (long? flagID, long? segmentID, long? constraintID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->DeleteConstraint_DELETE");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->DeleteConstraint_DELETE");
            // verify the required parameter 'constraintID' is set
            if (constraintID == null)
                throw new ApiException(400, "Missing required parameter 'constraintID' when calling ConstraintApi->DeleteConstraint_DELETE");

            var localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints/{constraintID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (constraintID != null) localVarPathParams.Add("constraintID", this.Configuration.ApiClient.ParameterToString(constraintID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                null,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>List&lt;Constraint&gt;</returns>
        public List<Constraint> FindConstraints_GET (long? flagID, long? segmentID)
        {
            ApiResponse<List<Constraint>> response = FindConstraints_GETWithHttpInfo(flagID, segmentID);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling FindConstraints_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling FindConstraints_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>ApiResponse of List&lt;Constraint&gt;</returns>
        public ApiResponse< List<Constraint> > FindConstraints_GETWithHttpInfo (long? flagID, long? segmentID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->FindConstraints_GET");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->FindConstraints_GET");

            const string localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            List<Constraint> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Constraint>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Constraint>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Constraint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>Task of List&lt;Constraint&gt;</returns>
        public async System.Threading.Tasks.Task<List<Constraint>> FindConstraints_GETAsync (long? flagID, long? segmentID)
        {
            ApiResponse<List<Constraint>> response = await FindConstraints_GETAsyncWithHttpInfo(flagID, segmentID);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling FindConstraints_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling FindConstraints_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <returns>Task of ApiResponse (List&lt;Constraint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Constraint>>> FindConstraints_GETAsyncWithHttpInfo (long? flagID, long? segmentID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->FindConstraints_GET");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->FindConstraints_GET");

            var localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            List<Constraint> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Constraint>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Constraint>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Constraint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Constraint</returns>
        public Constraint PutConstraint_PUT (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body)
        {
            ApiResponse<Constraint> response = PutConstraint_PUTWithHttpInfo(flagID, segmentID, constraintID, body);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling PutConstraint_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling PutConstraint_PUT: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>ApiResponse of Constraint</returns>
        public ApiResponse< Constraint > PutConstraint_PUTWithHttpInfo (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->PutConstraint_PUT");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->PutConstraint_PUT");
            // verify the required parameter 'constraintID' is set
            if (constraintID == null)
                throw new ApiException(400, "Missing required parameter 'constraintID' when calling ConstraintApi->PutConstraint_PUT");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConstraintApi->PutConstraint_PUT");

            const string localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints/{constraintID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (constraintID != null) localVarPathParams.Add("constraintID", this.Configuration.ApiClient.ParameterToString(constraintID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Constraint resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Constraint)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Constraint));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Constraint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of Constraint</returns>
        public async System.Threading.Tasks.Task<Constraint> PutConstraint_PUTAsync (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body)
        {
            ApiResponse<Constraint> response = await PutConstraint_PUTAsyncWithHttpInfo(flagID, segmentID, constraintID, body);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling PutConstraint_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling PutConstraint_PUT: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <param name="segmentID">numeric ID of the segment</param>
        /// <param name="constraintID">numeric ID of the constraint</param>
        /// <param name="body">create a constraint</param>
        /// <returns>Task of ApiResponse (Constraint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Constraint>> PutConstraint_PUTAsyncWithHttpInfo (long? flagID, long? segmentID, long? constraintID, CreateConstraintRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling ConstraintApi->PutConstraint_PUT");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling ConstraintApi->PutConstraint_PUT");
            // verify the required parameter 'constraintID' is set
            if (constraintID == null)
                throw new ApiException(400, "Missing required parameter 'constraintID' when calling ConstraintApi->PutConstraint_PUT");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConstraintApi->PutConstraint_PUT");

            var localVarPath = "./flags/{flagID}/segments/{segmentID}/constraints/{constraintID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("segmentID", this.Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (constraintID != null) localVarPathParams.Add("constraintID", this.Configuration.ApiClient.ParameterToString(constraintID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Constraint resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Constraint)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Constraint));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Constraint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
    }
}

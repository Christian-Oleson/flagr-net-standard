/* 
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Flagr.Api.Client;
using Flagr.Api.Model;

namespace Flagr.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlagApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Flag</returns>
        Flag CreateFlag (CreateFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> CreateFlagWithHttpInfo (CreateFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns></returns>
        void DeleteFlag (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFlagWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>List&lt;Flag&gt;</returns>
        List<Flag> FindFlags (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>ApiResponse of List&lt;Flag&gt;</returns>
        ApiResponse<List<Flag>> FindFlagsWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        Flag GetFlag (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> GetFlagWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetFlagEntityTypes ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetFlagEntityTypesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>List&lt;FlagSnapshot&gt;</returns>
        List<FlagSnapshot> GetFlagSnapshots (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of List&lt;FlagSnapshot&gt;</returns>
        ApiResponse<List<FlagSnapshot>> GetFlagSnapshotsWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Flag</returns>
        Flag PutFlag (long? flagID, PutFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> PutFlagWithHttpInfo (long? flagID, PutFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        Flag RestoreFlag (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> RestoreFlagWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Flag</returns>
        Flag SetFlagEnabled (long? flagID, SetFlagEnabledRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> SetFlagEnabledWithHttpInfo (long? flagID, SetFlagEnabledRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> CreateFlagAsync (CreateFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> CreateFlagAsyncWithHttpInfo (CreateFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFlagAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFlagAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of List&lt;Flag&gt;</returns>
        System.Threading.Tasks.Task<List<Flag>> FindFlagsAsync (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Flag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Flag>>> FindFlagsAsyncWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> GetFlagAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> GetFlagAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetFlagEntityTypesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetFlagEntityTypesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of List&lt;FlagSnapshot&gt;</returns>
        System.Threading.Tasks.Task<List<FlagSnapshot>> GetFlagSnapshotsAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (List&lt;FlagSnapshot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlagSnapshot>>> GetFlagSnapshotsAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> PutFlagAsync (long? flagID, PutFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> PutFlagAsyncWithHttpInfo (long? flagID, PutFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> RestoreFlagAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> RestoreFlagAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> SetFlagEnabledAsync (long? flagID, SetFlagEnabledRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> SetFlagEnabledAsyncWithHttpInfo (long? flagID, SetFlagEnabledRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FlagApi : IFlagApi
    {
        private Flagr.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlagApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlagApi(String basePath)
        {
            this.Configuration = new Flagr.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlagApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FlagApi(Flagr.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flagr.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flagr.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flagr.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Flag</returns>
        public Flag CreateFlag (CreateFlagRequest body)
        {
             ApiResponse<Flag> localVarResponse = CreateFlagWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > CreateFlagWithHttpInfo (CreateFlagRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->CreateFlag");

            var localVarPath = "./flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> CreateFlagAsync (CreateFlagRequest body)
        {
             ApiResponse<Flag> localVarResponse = await CreateFlagAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> CreateFlagAsyncWithHttpInfo (CreateFlagRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->CreateFlag");

            var localVarPath = "./flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns></returns>
        public void DeleteFlag (long? flagID)
        {
             DeleteFlagWithHttpInfo(flagID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFlagWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->DeleteFlag");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFlagAsync (long? flagID)
        {
             await DeleteFlagAsyncWithHttpInfo(flagID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFlagAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->DeleteFlag");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>List&lt;Flag&gt;</returns>
        public List<Flag> FindFlags (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {
             ApiResponse<List<Flag>> localVarResponse = FindFlagsWithHttpInfo(limit, enabled, description, tags, descriptionLike, key, offset, preload, deleted);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>ApiResponse of List&lt;Flag&gt;</returns>
        public ApiResponse< List<Flag> > FindFlagsWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {

            var localVarPath = "./flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (descriptionLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description_like", descriptionLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (preload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preload", preload)); // query parameter
            if (deleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleted", deleted)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Flag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Flag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Flag>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of List&lt;Flag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Flag>> FindFlagsAsync (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {
             ApiResponse<List<Flag>> localVarResponse = await FindFlagsAsyncWithHttpInfo(limit, enabled, description, tags, descriptionLike, key, offset, preload, deleted);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Flag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Flag>>> FindFlagsAsyncWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {

            var localVarPath = "./flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (descriptionLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description_like", descriptionLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (preload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preload", preload)); // query parameter
            if (deleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleted", deleted)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Flag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Flag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Flag>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        public Flag GetFlag (long? flagID)
        {
             ApiResponse<Flag> localVarResponse = GetFlagWithHttpInfo(flagID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > GetFlagWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlag");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> GetFlagAsync (long? flagID)
        {
             ApiResponse<Flag> localVarResponse = await GetFlagAsyncWithHttpInfo(flagID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> GetFlagAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlag");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetFlagEntityTypes ()
        {
             ApiResponse<List<string>> localVarResponse = GetFlagEntityTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetFlagEntityTypesWithHttpInfo ()
        {

            var localVarPath = "./flags/entity_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlagEntityTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetFlagEntityTypesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetFlagEntityTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetFlagEntityTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "./flags/entity_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlagEntityTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>List&lt;FlagSnapshot&gt;</returns>
        public List<FlagSnapshot> GetFlagSnapshots (long? flagID)
        {
             ApiResponse<List<FlagSnapshot>> localVarResponse = GetFlagSnapshotsWithHttpInfo(flagID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of List&lt;FlagSnapshot&gt;</returns>
        public ApiResponse< List<FlagSnapshot> > GetFlagSnapshotsWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlagSnapshots");

            var localVarPath = "./flags/{flagID}/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlagSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlagSnapshot>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<FlagSnapshot>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlagSnapshot>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of List&lt;FlagSnapshot&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlagSnapshot>> GetFlagSnapshotsAsync (long? flagID)
        {
             ApiResponse<List<FlagSnapshot>> localVarResponse = await GetFlagSnapshotsAsyncWithHttpInfo(flagID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (List&lt;FlagSnapshot&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FlagSnapshot>>> GetFlagSnapshotsAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlagSnapshots");

            var localVarPath = "./flags/{flagID}/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFlagSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FlagSnapshot>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<FlagSnapshot>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlagSnapshot>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Flag</returns>
        public Flag PutFlag (long? flagID, PutFlagRequest body)
        {
             ApiResponse<Flag> localVarResponse = PutFlagWithHttpInfo(flagID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > PutFlagWithHttpInfo (long? flagID, PutFlagRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->PutFlag");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->PutFlag");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> PutFlagAsync (long? flagID, PutFlagRequest body)
        {
             ApiResponse<Flag> localVarResponse = await PutFlagAsyncWithHttpInfo(flagID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> PutFlagAsyncWithHttpInfo (long? flagID, PutFlagRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->PutFlag");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->PutFlag");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        public Flag RestoreFlag (long? flagID)
        {
             ApiResponse<Flag> localVarResponse = RestoreFlagWithHttpInfo(flagID);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > RestoreFlagWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->RestoreFlag");

            var localVarPath = "./flags/{flagID}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> RestoreFlagAsync (long? flagID)
        {
             ApiResponse<Flag> localVarResponse = await RestoreFlagAsyncWithHttpInfo(flagID);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> RestoreFlagAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->RestoreFlag");

            var localVarPath = "./flags/{flagID}/restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Flag</returns>
        public Flag SetFlagEnabled (long? flagID, SetFlagEnabledRequest body)
        {
             ApiResponse<Flag> localVarResponse = SetFlagEnabledWithHttpInfo(flagID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > SetFlagEnabledWithHttpInfo (long? flagID, SetFlagEnabledRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->SetFlagEnabled");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->SetFlagEnabled");

            var localVarPath = "./flags/{flagID}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFlagEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> SetFlagEnabledAsync (long? flagID, SetFlagEnabledRequest body)
        {
             ApiResponse<Flag> localVarResponse = await SetFlagEnabledAsyncWithHttpInfo(flagID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> SetFlagEnabledAsyncWithHttpInfo (long? flagID, SetFlagEnabledRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->SetFlagEnabled");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->SetFlagEnabled");

            var localVarPath = "./flags/{flagID}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetFlagEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Flag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag)));
        }

    }
}

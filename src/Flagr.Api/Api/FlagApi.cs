/* 
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\". 
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Flagr.Api.Client;
using Flagr.Api.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Flagr.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IFlagApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Flag</returns>
        Flag CreateFlag_POST (CreateFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> CreateFlag_POSTWithHttpInfo (CreateFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns></returns>
        void DeleteFlag_DELETE (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of object(void)</returns>
        ApiResponse<object> DeleteFlag_DELETEWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>List&lt;Flag&gt;</returns>
        List<Flag> FindFlags_GET (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>ApiResponse of List&lt;Flag&gt;</returns>
        ApiResponse<List<Flag>> FindFlags_GETWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        Flag GetFlag_GET (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> GetFlag_GETWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetFlagEntityTypes_GET ();

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetFlagEntityTypes_GETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>List&lt;FlagSnapshot&gt;</returns>
        List<FlagSnapshot> GetFlagSnapshots_GET (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of List&lt;FlagSnapshot&gt;</returns>
        ApiResponse<List<FlagSnapshot>> GetFlagSnapshots_GETWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Flag</returns>
        Flag PutFlag_PUT (long? flagID, PutFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> PutFlag_PUTWithHttpInfo (long? flagID, PutFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        Flag RestoreFlag_PUT (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> RestoreFlag_PUTWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Flag</returns>
        Flag SetFlagEnabled_PUT (long? flagID, SetFlagEnabledRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>ApiResponse of Flag</returns>
        ApiResponse<Flag> SetFlagEnabled_PUTWithHttpInfo (long? flagID, SetFlagEnabledRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> CreateFlag_POSTAsync (CreateFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> CreateFlag_POSTAsyncWithHttpInfo (CreateFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFlag_DELETEAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DeleteFlag_DELETEAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of List&lt;Flag&gt;</returns>
        System.Threading.Tasks.Task<List<Flag>> FindFlags_GETAsync (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Flag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Flag>>> FindFlags_GETAsyncWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> GetFlag_GETAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> GetFlag_GETAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetFlagEntityTypes_GETAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetFlagEntityTypes_GETAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of List&lt;FlagSnapshot&gt;</returns>
        System.Threading.Tasks.Task<List<FlagSnapshot>> GetFlagSnapshots_GETAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (List&lt;FlagSnapshot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlagSnapshot>>> GetFlagSnapshots_GETAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> PutFlag_PUTAsync (long? flagID, PutFlagRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> PutFlag_PUTAsyncWithHttpInfo (long? flagID, PutFlagRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> RestoreFlag_PUTAsync (long? flagID);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> RestoreFlag_PUTAsyncWithHttpInfo (long? flagID);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of Flag</returns>
        System.Threading.Tasks.Task<Flag> SetFlagEnabled_PUTAsync (long? flagID, SetFlagEnabledRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Flag>> SetFlagEnabled_PUTAsyncWithHttpInfo (long? flagID, SetFlagEnabledRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    [ExcludeFromCodeCoverage]
    public partial class FlagApi : IFlagApi
    {
        private Flagr.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlagApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlagApi(string basePath)
        {
            Configuration = new Flagr.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlagApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FlagApi(Flagr.Api.Client.Configuration configuration = null)
        {
            Configuration = configuration ?? Flagr.Api.Client.Configuration.Default;

            ExceptionFactory = Flagr.Api.Client.Configuration.DefaultExceptionFactory;

            Configuration.ApiClient.Configuration = Configuration.ApiClient.Configuration ?? Configuration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl != null ? Configuration.ApiClient.RestClient.BaseUrl.ToString() : string.Empty;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flagr.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flagr.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Flag</returns>
        public Flag CreateFlag_POST (CreateFlagRequest body)
        {
            ApiResponse<Flag> response = CreateFlag_POSTWithHttpInfo(body);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling CreateFlag_POST: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling CreateFlag_POST: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > CreateFlag_POSTWithHttpInfo (CreateFlagRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->CreateFlag_POST");

            const string localVarPath = "./flags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> CreateFlag_POSTAsync (CreateFlagRequest body)
        {
            ApiResponse<Flag> response = await CreateFlag_POSTAsyncWithHttpInfo(body);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling CreateFlag_POST: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling CreateFlag_POST: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">create a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> CreateFlag_POSTAsyncWithHttpInfo (CreateFlagRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->CreateFlag_POST");

            var localVarPath = "./flags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns></returns>
        public void DeleteFlag_DELETE (long? flagID)
        {
            DeleteFlag_DELETEWithHttpInfo(flagID);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>ApiResponse of object(void)</returns>
        public ApiResponse<object> DeleteFlag_DELETEWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->DeleteFlag_DELETE");

            const string localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                null,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFlag_DELETEAsync (long? flagID)
        {
            await DeleteFlag_DELETEAsyncWithHttpInfo(flagID);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DeleteFlag_DELETEAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->DeleteFlag_DELETE");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            object resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                null,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>List&lt;Flag&gt;</returns>
        public List<Flag> FindFlags_GET (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {
            ApiResponse<List<Flag>> response = FindFlags_GETWithHttpInfo(limit, enabled, description, tags, descriptionLike, key, offset, preload, deleted);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling FindFlags_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling FindFlags_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>ApiResponse of List&lt;Flag&gt;</returns>
        public ApiResponse< List<Flag> > FindFlags_GETWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {

            const string localVarPath = "./flags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (descriptionLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description_like", descriptionLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (preload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preload", preload)); // query parameter
            if (deleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleted", deleted)); // query parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            List<Flag> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Flag>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Flag>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Flag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of List&lt;Flag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Flag>> FindFlags_GETAsync (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {
            ApiResponse<List<Flag>> response = await FindFlags_GETAsyncWithHttpInfo(limit, enabled, description, tags, descriptionLike, key, offset, preload, deleted);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling FindFlags_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling FindFlags_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">the numbers of flags to return (optional)</param>
        /// <param name="enabled">return flags having given enabled status (optional)</param>
        /// <param name="description">return flags exactly matching given description (optional)</param>
        /// <param name="tags">return flags with the given tags (comma separated) (optional)</param>
        /// <param name="descriptionLike">return flags partially matching given description (optional)</param>
        /// <param name="key">return flags matching given key (optional)</param>
        /// <param name="offset">return flags given the offset, it should usually set together with limit (optional)</param>
        /// <param name="preload">return flags with preloaded segments and variants (optional)</param>
        /// <param name="deleted">return all deleted flags (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Flag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Flag>>> FindFlags_GETAsyncWithHttpInfo (long? limit = null, bool? enabled = null, string description = null, string tags = null, string descriptionLike = null, string key = null, long? offset = null, bool? preload = null, bool? deleted = null)
        {

            var localVarPath = "./flags";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (descriptionLike != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description_like", descriptionLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (preload != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preload", preload)); // query parameter
            if (deleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deleted", deleted)); // query parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            List<Flag> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<Flag>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Flag>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<Flag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        public Flag GetFlag_GET (long? flagID)
        {
            ApiResponse<Flag> response = GetFlag_GETWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling GetFlag_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling GetFlag_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > GetFlag_GETWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlag_GET");

            const string localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> GetFlag_GETAsync (long? flagID)
        {
            ApiResponse<Flag> response = await GetFlag_GETAsyncWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling GetFlag_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling GetFlag_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> GetFlag_GETAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlag_GET");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetFlagEntityTypes_GET ()
        {
            ApiResponse<List<string>> response = GetFlagEntityTypes_GETWithHttpInfo();
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling GetFlagEntityTypes_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling GetFlagEntityTypes_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetFlagEntityTypes_GETWithHttpInfo ()
        {

            const string localVarPath = "./flags/entity_types";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            List<string> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<string>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetFlagEntityTypes_GETAsync ()
        {
            ApiResponse<List<string>> response = await GetFlagEntityTypes_GETAsyncWithHttpInfo();
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling GetFlagEntityTypes_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling GetFlagEntityTypes_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetFlagEntityTypes_GETAsyncWithHttpInfo ()
        {

            var localVarPath = "./flags/entity_types";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            List<string> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<string>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>List&lt;FlagSnapshot&gt;</returns>
        public List<FlagSnapshot> GetFlagSnapshots_GET (long? flagID)
        {
            ApiResponse<List<FlagSnapshot>> response = GetFlagSnapshots_GETWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling GetFlagSnapshots_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling GetFlagSnapshots_GET: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of List&lt;FlagSnapshot&gt;</returns>
        public ApiResponse< List<FlagSnapshot> > GetFlagSnapshots_GETWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlagSnapshots_GET");

            const string localVarPath = "./flags/{flagID}/snapshots";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            List<FlagSnapshot> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<FlagSnapshot>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlagSnapshot>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<FlagSnapshot>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of List&lt;FlagSnapshot&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlagSnapshot>> GetFlagSnapshots_GETAsync (long? flagID)
        {
            ApiResponse<List<FlagSnapshot>> response = await GetFlagSnapshots_GETAsyncWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling GetFlagSnapshots_GET: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling GetFlagSnapshots_GET: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (List&lt;FlagSnapshot&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FlagSnapshot>>> GetFlagSnapshots_GETAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->GetFlagSnapshots_GET");

            var localVarPath = "./flags/{flagID}/snapshots";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            List<FlagSnapshot> resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (List<FlagSnapshot>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FlagSnapshot>));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<List<FlagSnapshot>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Flag</returns>
        public Flag PutFlag_PUT (long? flagID, PutFlagRequest body)
        {
            ApiResponse<Flag> response = PutFlag_PUTWithHttpInfo(flagID, body);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling PutFlag_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling PutFlag_PUT: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > PutFlag_PUTWithHttpInfo (long? flagID, PutFlagRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->PutFlag_PUT");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->PutFlag_PUT");

            const string localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> PutFlag_PUTAsync (long? flagID, PutFlagRequest body)
        {
            ApiResponse<Flag> response = await PutFlag_PUTAsyncWithHttpInfo(flagID, body);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling PutFlag_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling PutFlag_PUT: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">update a flag</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> PutFlag_PUTAsyncWithHttpInfo (long? flagID, PutFlagRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->PutFlag_PUT");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->PutFlag_PUT");

            var localVarPath = "./flags/{flagID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Flag</returns>
        public Flag RestoreFlag_PUT (long? flagID)
        {
            ApiResponse<Flag> response = RestoreFlag_PUTWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling RestoreFlag_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling RestoreFlag_PUT: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > RestoreFlag_PUTWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->RestoreFlag_PUT");

            const string localVarPath = "./flags/{flagID}/restore";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> RestoreFlag_PUTAsync (long? flagID)
        {
            ApiResponse<Flag> response = await RestoreFlag_PUTAsyncWithHttpInfo(flagID);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling RestoreFlag_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling RestoreFlag_PUT: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> RestoreFlag_PUTAsyncWithHttpInfo (long? flagID)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->RestoreFlag_PUT");

            var localVarPath = "./flags/{flagID}/restore";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Flag</returns>
        public Flag SetFlagEnabled_PUT (long? flagID, SetFlagEnabledRequest body)
        {
            ApiResponse<Flag> response = SetFlagEnabled_PUTWithHttpInfo(flagID, body);
            if(response.StatusCode >= 400)
                throw new ApiException (response.StatusCode, "Error calling SetFlagEnabled_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException (response.StatusCode, "Error calling SetFlagEnabled_PUT: " + response.Headers, response.Headers);
            return response.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>ApiResponse of Flag</returns>
        public ApiResponse< Flag > SetFlagEnabled_PUTWithHttpInfo (long? flagID, SetFlagEnabledRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->SetFlagEnabled_PUT");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->SetFlagEnabled_PUT");

            const string localVarPath = "./flags/{flagID}/enabled";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of Flag</returns>
        public async System.Threading.Tasks.Task<Flag> SetFlagEnabled_PUTAsync (long? flagID, SetFlagEnabledRequest body)
        {
            ApiResponse<Flag> response = await SetFlagEnabled_PUTAsyncWithHttpInfo(flagID, body);
            if(response.StatusCode >= 400)
                throw new ApiException(response.StatusCode, "Error calling SetFlagEnabled_PUT: " + response.Data, response.Data);
            if (response.StatusCode == 0)
                throw new ApiException(response.StatusCode, "Error calling SetFlagEnabled_PUT: " + response.Headers, response.Headers);
            return response.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Flagr.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flagID">numeric ID of the flag to get</param>
        /// <param name="body">set flag enabled state</param>
        /// <returns>Task of ApiResponse (Flag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Flag>> SetFlagEnabled_PUTAsyncWithHttpInfo (long? flagID, SetFlagEnabledRequest body)
        {
            // verify the required parameter 'flagID' is set
            if (flagID == null)
                throw new ApiException(400, "Missing required parameter 'flagID' when calling FlagApi->SetFlagEnabled_PUT");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlagApi->SetFlagEnabled_PUT");

            var localVarPath = "./flags/{flagID}/enabled";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (flagID != null) localVarPathParams.Add("flagID", this.Configuration.ApiClient.ParameterToString(flagID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            var localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            Flag resultingObject;
            string swaggerResponseMessage = null;

            try
            {
                resultingObject = (Flag)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Flag));
            }
            catch
            {
                resultingObject = null;
                swaggerResponseMessage = localVarResponse.Content;
            }

            var apiResponse = new ApiResponse<Flag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value?.ToString()),
                resultingObject,
                swaggerResponseMessage);
            return apiResponse;
        }
        
    }
}

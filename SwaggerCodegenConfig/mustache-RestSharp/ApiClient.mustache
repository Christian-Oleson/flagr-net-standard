{{>partial_header}}
using Polly;
using System.Collections.Generic;
using System.Collections;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System;
{{^netStandard}}
{{^supportsUWP}}
using System.Web;
{{/supportsUWP}}
{{/netStandard}}
using Newtonsoft.Json;
using RestSharp;
using Satts.Components.DatabaseLogger;
using System.Linq;
using System.Net;
using System.Text;
#pragma warning disable 618

namespace {{packageName}}.Client
{
    /// <summary>
    /// The API client is mainly responsible for making the HTTP calls to the API backend.
    /// </summary>
    [ExcludeFromCodeCoverage]
    {{>visibility}} partial class ApiClient
    {
        private readonly JsonSerializerSettings _serializerSettings = new JsonSerializerSettings
        {
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
        };

        private const int TooManyRequests = 429;

        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(IRestRequest request);

        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(IRestRequest request, IRestResponse response);

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        public ApiClient()
        {
            Configuration = {{packageName}}.Client.Configuration.Default;
            RestClient = new RestClient("{{{basePath}}}");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default base path ({{{basePath}}}).
        /// </summary>
        /// <param name="config">An instance of Configuration.</param>
        public ApiClient(Configuration config)
        {
            Configuration = config ?? {{packageName}}.Client.Configuration.Default;

            RestClient = new RestClient(Configuration.BasePath);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        /// <param name="basePath">The base path.</param>
        public ApiClient(string basePath = "{{{basePath}}}")
        {
            if (string.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");

            RestClient = new RestClient(basePath);
            Configuration = Client.Configuration.Default;
        }

        /// <summary>
        /// Gets or sets the default API client for making HTTP calls.
        /// </summary>
        /// <value>The default API client.</value>
        [Obsolete("ApiClient.Default is deprecated, please use 'Configuration.Default.ApiClient' instead.")]
        public static ApiClient Default;

        /// <summary>
        /// Gets or sets an instance of the IReadableConfiguration.
        /// </summary>
        /// <value>An instance of the IReadableConfiguration.</value>
        /// <remarks>
        /// <see cref="IReadableConfiguration"/> helps us to avoid modifying possibly global
        /// configuration values from within a given client. It does not guarantee thread-safety
        /// of the <see cref="Configuration"/> instance in any way.
        /// </remarks>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Gets or sets an instance of the ILogger.
        /// </summary>
        /// <value>An instance of the ILogger.</value>
        /// <remarks>
        /// ILogger for logging info.
        /// </remarks>
        public ILogger Logger { get; set; }

        /// <summary>
        /// Gets or sets the RestClient.
        /// </summary>
        /// <value>An instance of the RestClient</value>
        public RestClient RestClient { get; set; }

        // Creates and sets up a RestRequest prior to a call.
        private RestRequest PrepareRequest(
            string path, {{^netStandard}}RestSharp.{{/netStandard}}Method method, List<KeyValuePair<string, string>> queryParams, Object postBody,
            Dictionary<string, string> headerParams, Dictionary<string, string> formParams,
            Dictionary<string, FileParameter> fileParams, Dictionary<string, string> pathParams,
            string contentType)
        {
            var request = new RestRequest(path, method);
            {{#netStandard}}
            // disable ResetSharp.Portable built-in serialization
            request.JsonSerializer = null;
            {{/netStandard}}

            // add path parameter, if any
            foreach(var kvp in pathParams)
                request.AddParameter(kvp.Key, kvp.Value, ParameterType.UrlSegment);

            // add header parameter, if any
            foreach(var kvp in headerParams)
                request.AddHeader(kvp.Key, kvp.Value);

            // add query parameter, if any
            foreach(var kvp in queryParams)
                request.AddQueryParameter(kvp.Key, kvp.Value);

            // add form parameter, if any
            foreach(var kvp in formParams)
                request.AddParameter(kvp.Key, kvp.Value);

            // add file parameter, if any
            foreach(var kvp in fileParams)
            {
                {{#netStandard}}
                request.AddFile(kvp.Value.Name, kvp.Value.Writer, kvp.Value.FileName, kvp.Value.ContentLength, kvp.Value.ContentType);
                {{/netStandard}}
                {{^netStandard}}
                {{^supportsUWP}}
                request.AddFile(kvp.Value.Name, kvp.Value.Writer, kvp.Value.FileName, kvp.Value.ContentType);
                {{/supportsUWP}}
                {{#supportsUWP}}
                byte[] paramWriter = null;
                value.Writer = delegate (Stream stream) { paramWriter = ToByteArray(stream); };
                request.AddFile(kvp.Value.Name, paramWriter, kvp.Value.FileName, kvp.Value.ContentType);
                {{/supportsUWP}}
                {{/netStandard}}
            }

            if (postBody != null) // http body (model or byte[]) parameter
            {
                {{^netStandard}}
                request.AddParameter(new Parameter { Value = postBody, Type = ParameterType.RequestBody, ContentType = contentType });
                {{/netStandard}}
                {{#netStandard}}
                request.AddParameter(contentType, postBody, ParameterType.RequestBody);
                {{/netStandard}}
            }

            //Configure timeout
            request.Timeout = TimeSpan.FromMilliseconds(Configuration.Timeout).Milliseconds;

            return request;
        }

        /// <summary>
        /// Makes the HTTP request (Sync).
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content Type of the request</param>
        /// <returns>object</returns>
        public object CallApi(
            string path, {{^netStandard}}RestSharp.{{/netStandard}}Method method, List<KeyValuePair<string, string>> queryParams, Object postBody,
            Dictionary<string, string> headerParams, Dictionary<string, string> formParams,
            Dictionary<string, FileParameter> fileParams, Dictionary<string, string> pathParams,
            string contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);

            // set timeout
            {{#netStandard}}RestClient.Timeout = TimeSpan.FromMilliseconds(Configuration.Timeout).Milliseconds;{{/netStandard}}
            {{^netStandard}}RestClient.Timeout = Configuration.Timeout;{{/netStandard}}
            // set user agent
            RestClient.UserAgent = Configuration.UserAgent;

            InterceptRequest(request);
            int initialRetryWaitSeconds = 1;
            var responsePolicy = Policy.HandleResult<IRestResponse>(r => (int)r.StatusCode == TooManyRequests)
                .OrResult(r => r.StatusCode == HttpStatusCode.RequestTimeout)
                .WaitAndRetry(5, retryAttempt => TimeSpan.FromSeconds(initialRetryWaitSeconds), (result, timeSpan, retryCount, context) =>
                {
                    initialRetryWaitSeconds = GetNewRetryWaitSeconds(result.Result, retryCount);
                    LogIRestRequest(request);

                    if (retryCount == 4)
                        AddCloseConnectionHeader(request);
                })
                .ExecuteAndCapture(() => RestClient.Execute(request));
            InterceptResponse(request, responsePolicy.Result);

            return responsePolicy.Result;
        }

        private int GetNewRetryWaitSeconds(IRestResponse response, int retryCount)
        {
            Logger.Warning($"A HTTP response of {response.StatusCode} has been received. Entering the Policy Logic.");
            int retrySeconds = 0;

            try
            {
                object foundHeader = response.Headers.FirstOrDefault(p => p.Name != null && p.Name.Equals("Retry-After"))?.Value;
                if (foundHeader != null)
                {
                    retrySeconds = int.Parse((string)foundHeader);
                    Logger.Detail($"Retry-After header found with value {foundHeader}");
                }
                else
                {
                    retrySeconds = (int)Math.Pow(2, retryCount);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex.Message);
            }

            if (retryCount > 1)
                LogExcessiveRetriesWithDetailedInformation(response);

            Logger.Warning($"Retrying HTTP call after {retrySeconds} seconds for the retry attempt {retryCount}.");
            return retrySeconds;
        }

        private void AddCloseConnectionHeader(IRestRequest restRequest)
        {
            try
            {
                restRequest.AddHeader("Connection", "close");
            }
            catch(Exception ex)
            {
                Logger.Warning(ex.Message);
            }
        }

        private void LogIRestRequest(IRestRequest restRequest)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"This is attempt #{restRequest.Attempts} to call the api.");
            sb.AppendLine($"Body: {restRequest.Body?.ToString()}");
            sb.AppendLine($"Method: {restRequest.Method}");
            if (restRequest.Parameters != null)
            {
                int i = 1;
                foreach (var parameter in restRequest.Parameters)
                {
                    sb.AppendLine($"Parameter {i} of {restRequest.Parameters.Count}");
                    sb.AppendLine($"Parameter Name: {parameter.Name}");
                    if (parameter.Value == null || !parameter.Value.ToString().Contains("eyJ"))
                    {
                        sb.AppendLine($"Parameter Value: {parameter.Value}");
                    }
                    else
                    {
                        sb.AppendLine($"Parameter Value: ---Sensitive Data Omitted---");
                    }
                    sb.AppendLine($"Parameter Type: {parameter.Type}");
                    sb.AppendLine($"Parameter Content Type: {parameter.ContentType}");
                    i++;
                }
            }
            sb.AppendLine($"Resource: {restRequest.Resource}");
            Logger.Warning(sb.ToString());
        }

        private void LogExcessiveRetriesWithDetailedInformation(IRestResponse response)
        {
            var sb = new StringBuilder();
            sb.Append($"Response content: {response.Content}");
            sb.AppendLine($"Response content type: {response.ContentType}");
            sb.AppendLine($"Response content length: {response.ContentLength}");
            sb.AppendLine($"Response content encoding: {response.ContentEncoding}");
            sb.AppendLine($"Response status code {response.StatusCode}");
            sb.AppendLine($"Status description: {response.StatusDescription}");
            sb.AppendLine($"Response Uri: {response.ResponseUri}");
            sb.AppendLine($"Server: {response.Server}");
            foreach (var header in response.Headers)
            {
                sb.AppendLine($"Header {header.Name} with the {header.Value}.");
            }
            sb.AppendLine($"Response status: {response.ResponseStatus}");
            sb.AppendLine($"Error message: {response.ErrorMessage}");
            sb.AppendLine($"Protocol version: {response.ProtocolVersion}");

            Logger.Warning(sb.ToString());
        }

        {{#supportsAsync}}
        /// <summary>
        /// Makes the asynchronous HTTP request.
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content type.</param>
        /// <returns>The Task instance.</returns>
        public async System.Threading.Tasks.Task<object> CallApiAsync(
            string path, {{^netStandard}}RestSharp.{{/netStandard}}Method method, List<KeyValuePair<string, string>> queryParams, Object postBody,
            Dictionary<string, string> headerParams, Dictionary<string, string> formParams,
            Dictionary<string, FileParameter> fileParams, Dictionary<string, string> pathParams,
            string contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);

            // set timeout
            {{#netStandard}}RestClient.Timeout = TimeSpan.FromMilliseconds(Configuration.Timeout).Milliseconds;{{/netStandard}}
            {{^netStandard}}RestClient.Timeout = Configuration.Timeout;{{/netStandard}}
            // set user agent
            RestClient.UserAgent = Configuration.UserAgent;
            
            InterceptRequest(request);
            int initialRetryWaitSeconds = 1;
            var responsePolicy = await Policy.HandleResult<IRestResponse>(r => (int)r.StatusCode == TooManyRequests)
                .OrResult(r => r.StatusCode == HttpStatusCode.RequestTimeout)
                .WaitAndRetryAsync(5, retryAttempt => TimeSpan.FromSeconds(initialRetryWaitSeconds), (result, timeSpan, retryCount, context) =>
                {
                    initialRetryWaitSeconds = GetNewRetryWaitSeconds(result.Result, retryCount);
                    
                    if(retryCount > 1)
                        LogIRestRequest(request);
                })
                .ExecuteAndCaptureAsync(() => RestClient.ExecuteAsync(request));
            InterceptResponse(request, responsePolicy.Result);

            return responsePolicy.Result;
        }{{/supportsAsync}}

        /// <summary>
        /// Escape string (url-encoded).
        /// </summary>
        /// <param name="str">string to be escaped.</param>
        /// <returns>Escaped string.</returns>
        public string EscapeString(string str)
        {
            return UrlEncode(str);
        }

        /// <summary>
        /// Create FileParameter based on Stream.
        /// </summary>
        /// <param name="name">Parameter name.</param>
        /// <param name="stream">Input stream.</param>
        /// <returns>FileParameter.</returns>
        public FileParameter ParameterToFile(string name, Stream stream)
        {
            if (stream is FileStream fileStream)
                return FileParameter.Create(name, ReadAsBytes(fileStream), Path.GetFileName(fileStream.Name));
            
            return FileParameter.Create(name, ReadAsBytes(stream), "no_file_name_provided");
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public string ParameterToString(object obj)
        {
            switch (obj)
            {
                case DateTime dateTime:
                    // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                    // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                    // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                    // For example: 2009-06-15T13:45:30.0000000
                    return dateTime.ToString (Configuration.DateTimeFormat);
                case DateTimeOffset dateTimeOffset:
                    // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                    // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                    // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                    // For example: 2009-06-15T13:45:30.0000000
                    return dateTimeOffset.ToString(Configuration.DateTimeFormat);
                case IList list:
                {
                    var flattenedString = new StringBuilder();
                    foreach (var param in list)
                    {
                        if (flattenedString.Length > 0)
                            flattenedString.Append(",");
                        flattenedString.Append(param);
                    }
                    return flattenedString.ToString();
                }
                default:
                    return Convert.ToString(obj);
            }
        }

        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        public object Deserialize(IRestResponse response, Type type)
        {
            {{^netStandard}}IList<Parameter>{{/netStandard}}{{#netStandard}}var{{/netStandard}} headers = response.Headers;
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }

            if (type == typeof(Stream))
            {
                var filePath = string.IsNullOrEmpty(Configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : Configuration.TempFolderPath;
                var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                foreach (var header in headers)
                {
                    var match = regex.Match(header.ToString());
                    if (!match.Success)
                    {
                        continue;
                    }

                    string fileName = filePath + SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                    File.WriteAllBytes(fileName, response.RawBytes);
                    return new FileStream(fileName, FileMode.Open);
                }
                var stream = new MemoryStream(response.RawBytes);
                return stream;
            }

            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content, null, System.Globalization.DateTimeStyles.RoundtripKind);
            }

            if (type == typeof(string) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return ConvertType(response.Content, type);
            }

            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, _serializerSettings);
            }
            catch
            {
                return (object)response.Content;
            }
        }

        /// <summary>
        /// Serialize an input (model) into JSON string
        /// </summary>
        /// <param name="obj">Object.</param>
        /// <returns>JSON string.</returns>
        public string Serialize(object obj)
        {
            try
            {
                return obj != null ? JsonConvert.SerializeObject(obj) : null;
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        /// <summary>
        ///Check if the given MIME is a JSON MIME.
        ///JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public bool IsJsonMime(string mime)
        {
            var jsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
            return mime != null && (jsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json"));
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public string SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return "application/json";

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType.ToLower()))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public string SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            return accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase) ? "application/json" : string.Join(",", accepts);
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">String to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public string Base64Encode(string text)
        {
            return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Dynamically cast the object into target type.
        /// </summary>
        /// <param name="fromObject">Object to be casted</param>
        /// <param name="toObject">Target type</param>
        /// <returns>Casted object</returns>
        {{#supportsAsync}}
        public static dynamic ConvertType(dynamic fromObject, Type toObject)
        {{/supportsAsync}}
        {{^supportsAsync}}
        public static object ConvertType<T>(T fromObject, Type toObject) where T : class
        {{/supportsAsync}}
        {
            return Convert.ChangeType(fromObject, toObject);
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            byte[] buf = new byte[16*1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int count;
                while ((count = inputStream.Read(buf, 0, buf.Length)) > 0)
                {
                    ms.Write(buf, 0, count);
                }
                return ms.ToArray();
            }
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">String to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException(nameof(input));
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Sanitize filename by removing the path
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Filename</returns>
        public static string SanitizeFilename(string filename)
        {
            Match match = Regex.Match(filename, @".*[/\\](.*)$");

            return match.Success ? match.Groups[1].Value : filename;
        }
        {{^netStandard}}
        {{#supportsUWP}}
        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="stream">IO stream</param>
        /// <returns>Byte array</returns>
        public static byte[] ToByteArray(Stream stream)
        {
            stream.Position = 0;
            byte[] buffer = new byte[stream.Length];
            for (int totalBytesCopied = 0; totalBytesCopied < stream.Length;)
                totalBytesCopied += stream.Read(buffer, totalBytesCopied, Convert.ToInt32(stream.Length) - totalBytesCopied);
            return buffer;
        }
        {{/supportsUWP}}
        {{/netStandard}}

        /// <summary>
        /// Convert params to key/value pairs. 
        /// Use collectionFormat to properly format lists and collections.
        /// </summary>
        /// <param name="collectionFormat"></param>
        /// <param name="name">Key name.</param>
        /// <param name="value">Value object.</param>
        /// <returns>A list of KeyValuePairs</returns>
        public IEnumerable<KeyValuePair<string, string>> ParameterToKeyValuePairs(string collectionFormat, string name, object value)
        {
            var parameters = new List<KeyValuePair<string, string>>();

            if (IsCollection(value) && collectionFormat == "multi")
            {
                var valueCollection = value as IEnumerable;
                parameters.AddRange(from object item in valueCollection select new KeyValuePair<string, string>(name, ParameterToString(item)));
            }
            else
            {
                parameters.Add(new KeyValuePair<string, string>(name, ParameterToString(value)));
            }

            return parameters;
        }

        /// <summary>
        /// Check if generic object is a collection.
        /// </summary>
        /// <param name="value"></param>
        /// <returns>True if object is a collection type</returns>
        private static bool IsCollection(object value)
        {
            return value is IList || value is ICollection;
        }
    }
}
